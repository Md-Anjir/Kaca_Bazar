{"ast":null,"code":"import express from \"express\";\nimport { connectToDatabase } from \"../lib/db.js\"; // Ensure this is the correct path\nimport cors from 'cors';\nconst router = express.Router();\nconst app = express();\napp.use(express.json());\napp.use(cors({\n  origin: 'http://localhost:4000',\n  credentials: true\n}));\nrouter.get(\"/product-ads\", async (req, res) => {\n  try {\n    const connection = await connectToDatabase();\n    console.log(\"Connected to database\"); // Add this line\n    const [rows] = await connection.query(`   SELECT \n          spa.Seller_Product_Ad_ID,\n          spa.Seller_ID, \n          spa.Stock, \n          spa.Unit_Name, \n          spa.Unit_Price, \n          spa.Description, \n          pl.Product_Name,\n          s.Seller_Name\n        FROM seller_product_ads spa\n        JOIN product_list pl ON spa.Product_ID = pl.Product_ID\n        JOIN seller s ON spa.Seller_ID = s.Seller_ID `);\n    console.log(\"Fetched rows:\", rows); // Add this line\n    res.json(rows);\n  } catch (error) {\n    console.error('Error retrieving seller product ads:', error);\n    res.status(500).json({\n      message: 'Error retrieving seller product ads'\n    });\n  }\n});\nrouter.get('/seller-product-ads', async (req, res) => {\n  const category = req.query.category;\n  console.log(\"Category received is:\", category);\n  if (!category) {\n    return res.status(400).json({\n      message: 'Category is required'\n    });\n  }\n  try {\n    const connection = await connectToDatabase();\n    const [rows] = await connection.query(`\n        SELECT \n          spa.Seller_Product_Ad_ID,\n          spa.Seller_ID, \n          spa.Stock, \n          spa.Unit_Name, \n          spa.Unit_Price, \n          spa.Description, \n          pl.Product_Name,\n          s.Seller_Name\n        FROM seller_product_ads spa\n        JOIN product_list pl ON spa.Product_ID = pl.Product_ID\n        JOIN seller s ON spa.Seller_ID = s.Seller_ID\n        WHERE pl.Category = ?\n      `, [category]);\n    res.json(rows);\n  } catch (error) {\n    console.error('Error retrieving seller product ads:', error);\n    res.status(500).json({\n      message: 'Error retrieving seller product ads'\n    });\n  }\n});\nrouter.get(\"/seller-products/:sellerId\", async (req, res) => {\n  try {\n    const connection = await connectToDatabase();\n    const {\n      sellerId\n    } = req.params;\n    const [rows] = await connection.query(\"SELECT spa.Seller_Product_Ad_ID,spa.Seller_ID, spa.Stock, spa.Unit_Name, spa.Unit_Price, spa.Description, pl.Product_Name,s.Seller_Name FROM seller_product_ads spa JOIN product_list pl ON spa.Product_ID = pl.Product_ID JOIN seller s ON spa.Seller_ID = s.Seller_ID WHERE spa.Seller_ID = ?\", [sellerId]);\n    if (rows.length === 0) {\n      return res.status(404).json({\n        message: `No products found for seller ID: ${sellerId}`\n      });\n    }\n    res.json(rows);\n  } catch (error) {\n    console.error(\"Error fetching products:\", error);\n    res.status(500).json({\n      message: \"Server error, please try again later.\"\n    });\n  }\n});\nexport default router;","map":{"version":3,"names":["express","connectToDatabase","cors","router","Router","app","use","json","origin","credentials","get","req","res","connection","console","log","rows","query","error","status","message","category","sellerId","params","length"],"sources":["F:/Kaca Bazar/frontend/src/component/ProductCategories.js"],"sourcesContent":["import express from \"express\";\r\nimport { connectToDatabase } from \"../lib/db.js\"; // Ensure this is the correct path\r\nimport cors from 'cors';\r\n\r\nconst router = express.Router();\r\nconst app = express();\r\napp.use(express.json());\r\n\r\napp.use(cors({\r\n    origin: 'http://localhost:4000',\r\n    credentials: true,\r\n}));\r\n\r\nrouter.get(\"/product-ads\", async (req, res) => {\r\n  try {\r\n    const connection = await connectToDatabase();\r\n    console.log(\"Connected to database\"); // Add this line\r\n    const [rows] = await connection.query(\r\n      `   SELECT \r\n          spa.Seller_Product_Ad_ID,\r\n          spa.Seller_ID, \r\n          spa.Stock, \r\n          spa.Unit_Name, \r\n          spa.Unit_Price, \r\n          spa.Description, \r\n          pl.Product_Name,\r\n          s.Seller_Name\r\n        FROM seller_product_ads spa\r\n        JOIN product_list pl ON spa.Product_ID = pl.Product_ID\r\n        JOIN seller s ON spa.Seller_ID = s.Seller_ID `\r\n    );\r\n\r\n    console.log(\"Fetched rows:\", rows); // Add this line\r\n    res.json(rows);\r\n  } catch (error) {\r\n    console.error('Error retrieving seller product ads:', error);\r\n    res.status(500).json({ message: 'Error retrieving seller product ads' });\r\n  }\r\n});\r\n\r\nrouter.get('/seller-product-ads', async (req, res) => {\r\n  const category = req.query.category;\r\n  console.log(\"Category received is:\", category);\r\n\r\n  if (!category) {\r\n    return res.status(400).json({ message: 'Category is required' });\r\n  }\r\n\r\n  try {\r\n    const connection = await connectToDatabase();\r\n    const [rows] = await connection.query(\r\n      `\r\n        SELECT \r\n          spa.Seller_Product_Ad_ID,\r\n          spa.Seller_ID, \r\n          spa.Stock, \r\n          spa.Unit_Name, \r\n          spa.Unit_Price, \r\n          spa.Description, \r\n          pl.Product_Name,\r\n          s.Seller_Name\r\n        FROM seller_product_ads spa\r\n        JOIN product_list pl ON spa.Product_ID = pl.Product_ID\r\n        JOIN seller s ON spa.Seller_ID = s.Seller_ID\r\n        WHERE pl.Category = ?\r\n      `,\r\n      [category]\r\n    );\r\n\r\n    res.json(rows);\r\n  } catch (error) {\r\n    console.error('Error retrieving seller product ads:', error);\r\n    res.status(500).json({ message: 'Error retrieving seller product ads' });\r\n  }\r\n});\r\n\r\nrouter.get(\"/seller-products/:sellerId\", async (req, res) => {\r\n  try {\r\n    const connection = await connectToDatabase();\r\n    const { sellerId } = req.params;\r\n\r\n    const [rows] = await connection.query(\r\n      \"SELECT spa.Seller_Product_Ad_ID,spa.Seller_ID, spa.Stock, spa.Unit_Name, spa.Unit_Price, spa.Description, pl.Product_Name,s.Seller_Name FROM seller_product_ads spa JOIN product_list pl ON spa.Product_ID = pl.Product_ID JOIN seller s ON spa.Seller_ID = s.Seller_ID WHERE spa.Seller_ID = ?\",\r\n      [sellerId]\r\n    );\r\n\r\n    if (rows.length === 0) {\r\n      return res.status(404).json({ message: `No products found for seller ID: ${sellerId}` });\r\n    }\r\n\r\n    res.json(rows);\r\n  } catch (error) {\r\n    console.error(\"Error fetching products:\", error);\r\n    res.status(500).json({ message: \"Server error, please try again later.\" });\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}